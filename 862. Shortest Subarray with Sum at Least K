Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1], k = 1
Output: 1
Example 2:

Input: nums = [1,2], k = 4
Output: -1
Example 3:

Input: nums = [2,-1,2], k = 3
Output: 3



---------------------------Solutions---------------
class Solution {
    public int shortestSubarray(int[] nums, int k) {
        
        int nLen = nums.length;
        int shortest = nLen + 1;
        
		// Building a prefix/cummulative sum of all elements
        long[] prefixSum = new long[nLen + 1];
        for(int i=0; i < nLen; i++)
            prefixSum[i+1] = prefixSum[i] + nums[i];
        
		// Initialize the Deque for storing the starting indices
        Deque<Integer> startIdxs = new ArrayDeque<>();
        
        for(int i=0; i < nLen + 1; i++){
            // Finding the smallest window whose sum >= k
            while(!startIdxs.isEmpty() && prefixSum[i] - prefixSum[startIdxs.peek()] >= k)
                shortest = Math.min(shortest, i - startIdxs.poll());
            
            // Keeping the startIdxs deque in an order of increasing sequence
            while(!startIdxs.isEmpty() && prefixSum[i] <= prefixSum[startIdxs.peekLast()])
                startIdxs.pollLast();
            
            // Add the current index to the startIdxs queue
            startIdxs.add(i);
        }
        
        return shortest <= nLen ? shortest : -1;
    }
}