You are given the root of a binary tree and a positive integer k.

The level sum in the tree is the sum of the values of the nodes that are on the same level.

Return the kth largest level sum in the tree (not necessarily distinct). If there are fewer than k levels in the tree, return -1.

Note that two nodes are on the same level if they have the same distance from the root.

 

Example 1:


Input: root = [5,8,9,2,1,3,7,4,6], k = 2
Output: 13
Explanation: The level sums are the following:
- Level 1: 5.
- Level 2: 8 + 9 = 17.
- Level 3: 2 + 1 + 3 + 7 = 13.
- Level 4: 4 + 6 = 10.
The 2nd largest level sum is 13.
Example 2:


Input: root = [1,2,null,3], k = 1
Output: 3
Explanation: The largest level sum is 3.
 

Constraints:

The number of nodes in the tree is n.
2 <= n <= 105
1 <= Node.val <= 106
1 <= k <= n

----------------Solution----------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public long kthLargestLevelSum(TreeNode root, int k) {
        // List to store the sum of each level
        List<Long> levelSums = new ArrayList<>();

        // If the tree is empty, return -1
        if (root == null)
            return -1;

        // Queue for level-order traversal
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);

        int currentLevel = 1;
        while (!q.isEmpty()) {
            // Variable to store the sum of the current level
            long levelSum = 0;

            // Number of nodes at the current level
            int pending = q.size();
            for (int i = 0; i < pending; i++) {
                // Process each node at the current level
                TreeNode node = q.poll();

                // Add the node's value to the level sum
                levelSum += node.val;

                // Add child nodes to the queue for the next level
                if (node.left != null)
                    q.offer(node.left);
                if (node.right != null)
                    q.offer(node.right);
            }

            // Add the sum of the current level to the list
            levelSums.add(levelSum);

            // Move to the next level
            currentLevel++;
        }

        // If there are fewer levels than k, return -1
        if (levelSums.size() < k)
            return -1;

        // Sort the list in descending order
        Collections.sort(levelSums, Collections.reverseOrder());

        // Return the kth largest level sum
        return levelSums.get(k - 1);
    }
}