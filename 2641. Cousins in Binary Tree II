Given the root of a binary tree, replace the value of each node in the tree with the sum of all its cousins' values.

Two nodes of a binary tree are cousins if they have the same depth with different parents.

Return the root of the modified tree.

Note that the depth of a node is the number of edges in the path from the root node to it.

 

Example 1:


Input: root = [5,4,9,1,10,null,7]
Output: [0,0,0,7,7,null,11]
Explanation: The diagram above shows the initial binary tree and the binary tree after changing the value of each node.
- Node with value 5 does not have any cousins so its sum is 0.
- Node with value 4 does not have any cousins so its sum is 0.
- Node with value 9 does not have any cousins so its sum is 0.
- Node with value 1 has a cousin with value 7 so its sum is 7.
- Node with value 10 has a cousin with value 7 so its sum is 7.
- Node with value 7 has cousins with values 1 and 10 so its sum is 11.
Example 2:


Input: root = [3,1,2]
Output: [0,0,0]
Explanation: The diagram above shows the initial binary tree and the binary tree after changing the value of each node.
- Node with value 3 does not have any cousins so its sum is 0.
- Node with value 1 does not have any cousins so its sum is 0.
- Node with value 2 does not have any cousins so its sum is 0.
 

Constraints:

The number of nodes in the tree is in the range [1, 105].
1 <= Node.val <= 104
------------------Solution---------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    public TreeNode replaceValueInTree(TreeNode root) {
        if (root == null)
            return root;

        TreeNode res = new TreeNode(0);
        Queue<TreeNode> resq = new LinkedList<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        resq.offer(res);
        while (!q.isEmpty()) {
            int size = q.size();
            TreeNode[] t = new TreeNode[size];
            int sum = 0;
            for (int i = 0; i < size; i++) {
                t[i] = q.poll();
                if (t[i].left != null) {
                    q.offer(t[i].left);
                    sum += t[i].left.val;
                }
                if (t[i].right != null) {
                    q.offer(t[i].right);
                    sum += t[i].right.val;
                }
            }
            for (int i = 0; i < size; i++) {
                TreeNode curr = resq.poll();
                int cusins = sum - (t[i].left != null ? t[i].left.val : 0) - (t[i].right != null ? t[i].right.val : 0);
                if (t[i].left != null) {
                    curr.left = new TreeNode(cusins);
                    resq.offer(curr.left);
                }
                if (t[i].right != null) {
                    curr.right = new TreeNode(cusins);
                    resq.offer(curr.right);
                }
            }
        }
        return res;
    }
}